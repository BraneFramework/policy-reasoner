// String-identified primitives
Fact workflow.
Fact task.
Fact dataset.
Fact domain.
Fact tag.
Fact signature.

Fact user.
Fact domain Identified by user.

Fact commit.
Placeholder result For dataset.
Fact commits Identified by commit * result * dataset.

// Relations (populate these)
Fact is-valid Identified by signature.

Placeholder owner For domain.
Placeholder assigner For domain.
Fact metadata Identified by owner * tag * assigner * signature.

Fact workflow-metadata Identified by workflow * metadata.
Fact task-metadata     Identified by task * metadata.
Fact dataset-metadata  Identified by dataset * metadata.
Fact domain-metadata   Identified by domain * metadata.

Fact task-in            Identified by workflow * task.
Fact result             Identified by workflow * dataset.
Fact result-recipient   Identified by result * user.

// Workflow can have only one result-recipient but multiple results (commits)
Fact recipient Identified by dataset * user
    Holds when result(workflow, dataset) && result-recipient(result(workflow, dataset), user)

// Missing derive
// 1. metadata, klopt metadata bij func ook met dataset (bijv diabetes onderzoek) ook task en workflow en user. Alle combi's
// 2. Waar komt func vandaan die op op mijn dataset

// dataset is the actual code of the function not a dataset the function operates on
Fact function Identified by task * string * dataset.
Fact argument Identified by task * dataset.
Fact output Identified by task * dataset.
Fact task-at Identified by task * domain.

// Where the input dataset resides
Fact data-at Identified by dataset * user.

// Utilities (read only)
Fact input Identified by task * dataset
  Holds when function(task, dataset), argument(task, dataset).

// Input ends up as output
Fact input-to-output Identified by dataset1 * dataset2
    Holds when
        (Exists task: task When (argument(task, dataset1) && output(task, dataset2) && dataset1 != dataset2))

Fact input-used-for-output Identified by dataset1 * dataset2
    Holds when
        input-to-output(dataset1, dataset2)
        ||
        (
            Exists dataset3: dataset3 When input-to-output(dataset1, dataset3) && input-used-for-output(dataset3,dataset2)
        ).

// TODO also include every dataset that is used as input for the produced result 
Fact dataset-transferred-to Identified by dataset * user
    Holds when (
        (
            Exists task, dataset2, user : task When (
                (
                    input-used-for-output(dataset, dataset2)
                    &&
                    (argument(task, dataset2) || output(task, dataset2))
                    &&
                    task-at(task, domain(user))
                )
            )
        )
        ||
        (
            Exists workflow: workflow When result(workflow, dataset) && result-recipient(result(workflow, dataset), user)
        )
        ||
        (
            Exists dataset2, recipient: dataset2 When Holds(recipient) && ((recipient.user) == user) && ((recipient.dataset) == dataset2) && (input-used-for-output(dataset, dataset2))
        )
    ).

// Fact dataset-transferred-to Identified by dataset * user
//     Holds when (
//         Exists task, dataset2 : task When (
//             (
//                 input-used-for-output(dataset, dataset2)
//                 &&
//                 (argument(task, dataset2) || output(task, dataset2))
//                 &&
//                 task-at(task, domain(user))
//             )
//             ||
//             (
//                 output(task, dataset) && task-at(task, domain(user))
//             )
//         ) || (
//             Exists workflow: workflow When result(workflow, dataset) && result-recipient(result(workflow, dataset), user)
//         ) || (
//             Exists dataset2: dataset2 When (recipient.user) == user && (recipient.dataset) == dataset2 && input-used-for-output(dataset, dataset2)
//         )
//     ).

// Checker's policy reasoner connector interface
Fact task-to-execute Identified by task.
Fact dataset-to-transfer Identified by dataset * task.
Fact result-to-transfer Identified by workflow.
Fact workflow-to-exectue Identified by workflow.

// Constraints / sanity checks

// Exactly one function per task
Invariant one-function-per-task When
    (Forall task: Count(Foreach dataset: dataset When Holds(function(task, dataset))) == 1).
// Duty one-function-per-task
//     Holder task
//     Claimant task // dummy
//     Holds when task
//     Violated when
//         Count(Foreach dataset: dataset When Holds(function(task, dataset))) != 1.

// // Zero or one output per task
Invariant zero-or-one-output-per-task When
    (Forall task: Count(Foreach dataset: dataset When Holds(output(task, dataset))) < 2).
// Duty zero-or-one-output-per-task
//     Holder task
//     Claimant task // dummy
//     Holds when task
//     Violated when
//         Count(Foreach dataset: dataset When Holds(output(task, dataset))) >= 2.

// // // Zero or one recipient per workflow
Invariant zero-or-one-result-recipients-per-workflow When
    (Forall workflow: (Count(Foreach dataset, user : True When result-recipient(result(workflow, dataset), user)) < 2)).

// // // // Output dataset can't be used as a function's code 
// Invariant output-dataset-cant-be-function-dataset When
//     Not(
//         Exists dataset, task: function(task, dataset) && output(task, dataset)
//     ).

+task-to-execute(X).

// // // A requested to be exectued task should exists within the current workflow
Invariant requested-task-should-exist When
    // (Forall task-to-execute: Holds(task-to-execute.task)).
    (Forall task-to-execute: Holds(task-to-execute.task) When Holds(task-to-execute)).

// // // Every task should be part of a workflow
Invariant task-should-be-part-of-workflow When (Forall task: (Exists workflow: task-in(workflow, task))).



// // Fill knowledge base

// // Users
// +user(Hospitala).
// +domain(user(Hospitala)).
// +user(Hospitalb).
// +domain(user(Hospitalb)).
// +user(Hospitalc).
// +domain(user(Hospitalc)).

// +user(Scientista).

// // Functions
// +dataset(Funca).

// // Datasets (inputs)
// +dataset(Ina).
// +dataset(Inb).

// // Model Workflow
// +workflow(Currentworkflow).

// // task1
// +task(X).
// +task-in(Currentworkflow, X).
// +function(X, Funca).
// // +function(X, Ina).
// +argument(X, Ina).
// +dataset(Outa).
// +output(X, Outa).
// +task-at(X, domain(Hospitala)).

// // task2
// +task(Y).
// +task-in(Currentworkflow, Y).
// +function(Y, Funca).
// +argument(Y, Outa).
// +argument(Y, Inb).
// +dataset(Outb).
// +output(Y, Outb).
// +task-at(Y, domain(Hospitalb)).

// // task3
// +task(Z).
// +task-in(Currentworkflow, Z).
// +function(Z, Funca).
// +argument(Z, Outb).
// +dataset(Outc).
// +output(Z, Outc).
// +task-at(Z, domain(Hospitalc)).

// +result(Currentworkflow, Outc).
// +result(Currentworkflow, Outb).
// // +result-recipient(result(Currentworkflow, Outc), Scientista).
// +result-recipient(result(Currentworkflow, Outb), Scientista).

// // // Action that is performed / checked by the checker

// // // +task-to-execute(X).

// // // Policy engineers policy code

// // // Alleen taak draaien synth dataset 

// // // ?(
// // //     Not(
// // //         Exists task-to-execute: Holds(
// // //             task-at(task-to-execute.task, domain(Hospitalb))
// // //         )
// // //     )
// // // ).

// // // Various Checks

// // // Invariant foo When False.
// // // ?input-used-for-output(C,E).
// // // ?input-used-for-output(B,E).



// // // ?--input-to-output.
// // // ?--input-used-for-output.
// // // ?--dataset-transferred-to.
// // // ?one-function-per-task.
// // // ?zero-or-one-output-per-task.
// // // ?output-dataset-cant-be-function-dataset.
// // // ?requested-task-should-exist.
// // // ?task-should-be-part-of-workflow.
// // // ?zero-or-one-result-recipients-per-workflow.