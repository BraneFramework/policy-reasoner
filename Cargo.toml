[workspace]
resolver = "2"
members = [
    # Implementations
    "lib/reasoners/eflint-haskell",
    "lib/reasoners/eflint-json",
    "lib/reasoners/no-op",
    "lib/reasoners/posix",
    "lib/loggers/file",
    "lib/loggers/no-op",
    "lib/resolvers/file",

    # Library
    "lib/eflint-to-json",

    # Specifications
    "lib/spec",
    "lib/workflow"
]

[workspace.package]
repository = "https://github.com/epi-project/policy-reasoner"
license = "Apache-2.0"


[package]
name = "policy-reasoner"
version = "1.0.0"
edition = "2021"
rust-version = "1.75.0"
authors = ["Tim MÃ¼ller", "Bas Kloosterman", "Daniel Voogsgerd"]
repository.workspace = true
license.workspace = true
description = "A library for using several different reasoning backends to determine if a particular workflow is allowed by policy or not."


[[example]]
name = "eflint-haskell"
path = "./examples/eflint_haskell.rs"
required-features = ["eflint-haskell-reasoner", "file-logger"]

[[example]]
name = "eflint-json"
path = "./examples/eflint_json.rs"
required-features = ["eflint-json-reasoner", "eflint-to-json", "file-logger"]

[[example]]
name = "posix"
path = "./examples/posix.rs"
required-features = ["posix-reasoner", "file-logger", "serde", "workflow"]

[[example]]
name = "no-op"
path = "./examples/no_op.rs"
required-features = ["no-op-reasoner", "file-logger"]


[dependencies]
eflint-haskell-reasoner = { path = "./lib/reasoners/eflint-haskell", optional = true }
eflint-json-reasoner = { path = "./lib/reasoners/eflint-json", optional = true }
no-op-reasoner = { path = "./lib/reasoners/no-op", optional = true }
posix-reasoner = { path = "./lib/reasoners/posix", optional = true }
file-logger    = { path = "./lib/loggers/file", optional = true }
no-op-logger   = { path = "./lib/loggers/no-op", optional = true }
file-resolver  = { path = "./lib/resolvers/file", optional = true }
eflint-to-json = { path = "./lib/eflint-to-json", features = ["async-tokio", "tracing"], optional = true }
spec           = { path = "./lib/spec", package = "specifications" }
workflow       = { path = "./lib/workflow", optional = true }


[dev-dependencies]
clap = { version = "4.5.36", features = ["derive"] }
console = "0.15.11"
error-trace.workspace = true
serde_json = "1.0.140"
shlex = "1.3.0"
tracing = "0.1.41"
tracing-subscriber = { version = "0.3.19", features = ["env-filter"] }
tokio = { version = "1.44.2", default-features = false, features = ["fs", "io-std", "macros", "rt"] }


[features]
default = []

all = ["reasoners", "loggers", "resolvers", "auxillary"]

reasoners = ["eflint-haskell-reasoner", "eflint-json-reasoner", "no-op-reasoner", "posix-reasoner"]
# reasoners = ["eflint-json-reasoner", "no-op-reasoner"]
eflint-haskell-reasoner = ["dep:eflint-haskell-reasoner"]
eflint-json-reasoner = ["dep:eflint-json-reasoner"]
no-op-reasoner = ["dep:no-op-reasoner"]
posix-reasoner = ["dep:posix-reasoner"]

loggers = ["file-logger", "no-op-logger"]
file-logger = ["dep:file-logger"]
no-op-logger = ["dep:no-op-logger"]

resolvers = ["file-resolver"]
file-resolver = ["dep:file-resolver"]

auxillary = ["eflint-to-json", "workflow"]
eflint-to-json = ["dep:eflint-to-json"]
workflow = ["dep:workflow"]

serde = ["workflow/serde"]


[workspace.dependencies]
# The infamous lut99 crate set
enum-debug = { git = "https://github.com/Lut99/enum-debug", tag = "v1.1.0", features = ["derive"] }
error-trace = { git = "https://github.com/Lut99/error-trace-rs", tag = "v3.1.0" }

# Eflint
# NOTE: For now, we must skip the redirect. See <https://github.com/libgit2/libgit2/issues/7070>
eflint-json = { git = "https://gitlab.com/eflint/json-spec-rs.git", branch = "incorrect-is-invariant" }
